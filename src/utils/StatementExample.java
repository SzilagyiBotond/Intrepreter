package utils;

import exception.InterpreterException;
import model.expressions.*;
import model.statements.*;
import model.types.IntType;
import model.types.ReferenceType;
import model.types.StringType;
import model.values.BoolValue;
import model.values.IntValue;
import model.values.StringValue;

import java.util.List;
import java.util.Vector;

public class StatementExample {
    public static List<Statement> generateStatements() throws InterpreterException {
        Vector<Statement> statements = new Vector<>();
        Statement ex1= Utils.buildStatement(new VariableDeclarationStatement("v",new IntType()),new AssignmentStatement("v",new ValueExpression(new BoolValue())),new PrintStatement(new VariableExpression("v")));
        Statement ex2=Utils.buildStatement(new VariableDeclarationStatement("varf",new StringType()),new AssignmentStatement("varf", new ValueExpression(new StringValue("src/test.in"))),new OpenReadFileStatement(new VariableExpression("varf")),new VariableDeclarationStatement("varc",new IntType()),new ReadFileStatement("varc",new VariableExpression("varf")),new PrintStatement(new VariableExpression("varc")),new ReadFileStatement("varc",new VariableExpression("varf")),new PrintStatement(new VariableExpression("varc")),new CloseReadFileStatement(new VariableExpression("varf")));
        Statement ex3=Utils.buildStatement(new VariableDeclarationStatement("a",new IntType()),new VariableDeclarationStatement("b",new IntType()),new AssignmentStatement("a",new ValueExpression(new IntValue(2))),new AssignmentStatement("b",new ValueExpression(new IntValue(4))),new VariableDeclarationStatement("v",new ReferenceType(new IntType())),new New("v",new ArithmeticExpression(new VariableExpression("a"),new VariableExpression("b"), ArithmeticExpression.Operand.ADD)),new VariableDeclarationStatement("c",new ReferenceType(new ReferenceType(new IntType()))),new New("c",new VariableExpression("v")),new PrintStatement(new VariableExpression("v")),new PrintStatement(new VariableExpression("c")),new PrintStatement(new ReadHeapExpression(new VariableExpression("v"))),new PrintStatement(new ReadHeapExpression(new ReadHeapExpression(new VariableExpression("c")))));
        Statement ex4=Utils.buildStatement(new VariableDeclarationStatement("a",new IntType()),new VariableDeclarationStatement("b",new IntType()),new AssignmentStatement("a",new ValueExpression(new IntValue(2))),new AssignmentStatement("b",new ValueExpression(new IntValue(4))),new VariableDeclarationStatement("v",new ReferenceType(new IntType())),new New("v",new VariableExpression("a")),new PrintStatement(new ReadHeapExpression(new VariableExpression("v"))),new HeapWritingStatement("v",new VariableExpression("b")),new PrintStatement(new ReadHeapExpression(new VariableExpression("v"))));
        Statement ex5=Utils.buildStatement(new VariableDeclarationStatement("v",new IntType()),new AssignmentStatement("v",new ValueExpression(new IntValue(4))),new WhileStatement(new RelationalExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), RelationalExpression.Operand.GREATER),new CompoundStatement(new PrintStatement(new VariableExpression("v")),new AssignmentStatement("v",new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), ArithmeticExpression.Operand.SUB)))),new PrintStatement(new VariableExpression("v")));
        Statement ex6=Utils.buildStatement(new VariableDeclarationStatement("v",new ReferenceType(new IntType())),new New("v",new ValueExpression(new IntValue(2))),new VariableDeclarationStatement("a",new ReferenceType(new ReferenceType(new IntType()))),new New("a",new VariableExpression("v")),new New("v",new ValueExpression(new IntValue(30))),new PrintStatement(new ReadHeapExpression(new ReadHeapExpression(new VariableExpression("a")))));
        Statement ex7=Utils.buildStatement(new VariableDeclarationStatement("v",new IntType()),new VariableDeclarationStatement("a",new ReferenceType(new IntType())),new AssignmentStatement("v",new ValueExpression(new IntValue(10))),new New("a",new ValueExpression(new IntValue(22))),new ForkStatement(Utils.buildStatement(new HeapWritingStatement("a",new ValueExpression(new IntValue(30))),new AssignmentStatement("v",new ValueExpression(new IntValue(32))),new PrintStatement(new VariableExpression("v")),new PrintStatement(new ReadHeapExpression(new VariableExpression("a"))))),new PrintStatement(new VariableExpression("v")),new PrintStatement(new ReadHeapExpression(new VariableExpression("a"))));
        Statement ex8=Utils.buildStatement(new VariableDeclarationStatement("a",new ReferenceType(new IntType())),new New("a",new ValueExpression(new IntValue(3))),new New("a",new ValueExpression(new IntValue(4))),new NopStatement());
        //new statements
        Statement ex9=Utils.buildStatement(new VariableDeclarationStatement("v",new IntType()),new AssignmentStatement("v",new ValueExpression(new IntValue(20))),new ForStatement("v",new ValueExpression(new IntValue(0)),new ValueExpression(new IntValue(3)),new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), ArithmeticExpression.Operand.ADD),new ForkStatement(new CompoundStatement( new PrintStatement(new VariableExpression("v")),new AssignmentStatement("v",new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), ArithmeticExpression.Operand.ADD))))),new PrintStatement(new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(10)), ArithmeticExpression.Operand.MUL)));
        Statement ex10=Utils.buildStatement(new VariableDeclarationStatement("a",new ReferenceType(new IntType())),new VariableDeclarationStatement("b",new ReferenceType(new IntType())),new VariableDeclarationStatement("v",new IntType()),new New("a",new ValueExpression(new IntValue(0))),new New("b",new ValueExpression(new IntValue(0))),new HeapWritingStatement("a",new ValueExpression(new IntValue(1))),new HeapWritingStatement("b",new ValueExpression(new IntValue(2))),new ConditionalAssignmentStatement("v",new RelationalExpression(new ReadHeapExpression(new VariableExpression("a")),new ReadHeapExpression(new VariableExpression("b")), RelationalExpression.Operand.LESS),new ValueExpression(new IntValue(100)),new ValueExpression(new IntValue(200))),new PrintStatement(new VariableExpression("v")),new ConditionalAssignmentStatement("v",new RelationalExpression(new ReadHeapExpression(new VariableExpression("a")),new ArithmeticExpression( new ReadHeapExpression(new VariableExpression("b")),new ValueExpression(new IntValue(2)), ArithmeticExpression.Operand.SUB), RelationalExpression.Operand.LESS),new ValueExpression(new IntValue(100)),new ValueExpression(new IntValue(200))),new PrintStatement(new VariableExpression("v")));
        Statement ex11=Utils.buildStatement(new VariableDeclarationStatement("a",new IntType()),new VariableDeclarationStatement("b",new IntType()),new VariableDeclarationStatement("c",new IntType()),new AssignmentStatement("a",new ValueExpression(new IntValue(1))),new AssignmentStatement("b",new ValueExpression(new IntValue(2))),new AssignmentStatement("c",new ValueExpression(new IntValue(5))),new SwitchStatement(new ArithmeticExpression(new VariableExpression("a"),new ValueExpression(new IntValue(10)), ArithmeticExpression.Operand.MUL),new ArithmeticExpression(new VariableExpression("b"),new VariableExpression("c"), ArithmeticExpression.Operand.MUL),new CompoundStatement(new PrintStatement(new VariableExpression("a")),new PrintStatement(new VariableExpression("b"))),new ValueExpression(new IntValue(10)),new CompoundStatement(new PrintStatement(new ValueExpression(new IntValue(100))),new PrintStatement(new ValueExpression(new IntValue(200)))),new PrintStatement(new ValueExpression(new IntValue(300)))),new PrintStatement(new ValueExpression(new IntValue(300))));
        Statement ex12=Utils.buildStatement(new VariableDeclarationStatement("v",new IntType()),new AssignmentStatement("v",new ValueExpression(new IntValue(10))),new ForkStatement(Utils.buildStatement(new AssignmentStatement("v",new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), ArithmeticExpression.Operand.SUB)),new AssignmentStatement("v",new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), ArithmeticExpression.Operand.SUB)),new PrintStatement(new VariableExpression("v")))),new SleepStatement(10),new PrintStatement(new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(10)), ArithmeticExpression.Operand.MUL)));
        Statement ex13=Utils.buildStatement(new VariableDeclarationStatement("v",new IntType()),new AssignmentStatement("v",new ValueExpression(new IntValue(0))),new RepeatUntilStatement(Utils.buildStatement(new ForkStatement(new CompoundStatement(new PrintStatement(new VariableExpression("v")),new AssignmentStatement("v",new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), ArithmeticExpression.Operand.SUB)))),new AssignmentStatement("v",new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(1)), ArithmeticExpression.Operand.ADD))),new RelationalExpression(new VariableExpression("v"),new ValueExpression(new IntValue(3)), RelationalExpression.Operand.EQUAL)),new PrintStatement(new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(10)), ArithmeticExpression.Operand.MUL)));
        Statement ex14=Utils.buildStatement(new VariableDeclarationStatement("v1",new IntType()),new AssignmentStatement("v1",new ValueExpression(new IntValue(2))),new VariableDeclarationStatement("v2",new IntType()),new AssignmentStatement("v2",new ValueExpression(new IntValue(3))),new IfStatement(new RelationalExpression(new VariableExpression("v1"),new ValueExpression(new IntValue(0)), RelationalExpression.Operand.NOTEQUAL),new PrintStatement(new MULExpression(new VariableExpression("v1"),new VariableExpression("v2"))),new PrintStatement(new VariableExpression("v1"))));
        Statement ex15=Utils.buildStatement(new VariableDeclarationStatement("v",new IntType()),new AssignmentStatement("v",new ValueExpression(new IntValue(20))),new WaitStatement(10),new PrintStatement(new ArithmeticExpression(new VariableExpression("v"),new ValueExpression(new IntValue(10)), ArithmeticExpression.Operand.MUL)));
        statements.add(ex1);
        statements.add(ex2);
        statements.add(ex3);
        statements.add(ex4);
        statements.add(ex5);
        statements.add(ex6);
        statements.add(ex7);
        statements.add(ex8);
        statements.add(ex9);
        statements.add(ex10);
        statements.add(ex11);
        statements.add(ex12);
        statements.add(ex13);
        statements.add(ex14);
        statements.add(ex15);
        return statements;
    }
}
